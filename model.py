# -*- coding: utf-8 -*-
"""Master_NBA_Predictive_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16mdsw4rUN3jcKETlA4rHSXlp1Hjr4raK
"""
from argparse import ArgumentParser

import pandas as pd
import random as rnd
import numpy as np
import warnings

warnings.filterwarnings("ignore")

MULTIPLE_SEASON = pd.read_excel('data/output_multiple_season.xlsx')


def calculate(home_team, away_team):
    pd.options.display.float_format = '{:.2f}'.format

    homeCourtAdvantage = rnd.randint(3, 5)

    url = "https://www.basketball-reference.com/teams/{}/2020_games.html".format(
        home_team)
    dfs = pd.read_html(url)
    home_team_df = pd.concat(dfs)
    home_team_df = home_team_df[pd.notnull(home_team_df['Tm'])]
    home_team_df.columns = ['Game', 'Date', 'Time', 'Drop', 'Drop2', 'Drop3',
                            'Opponent', 'Drop4', 'Drop5', 'Team_Points',
                            'Opponent_Points', 'W', 'L', 'Streak', 'Notes']
    home_team_df = home_team_df.drop(
        columns=['Game', 'Date', 'Time', 'Drop', 'Drop2', 'Drop3', 'Drop4',
                 'Drop5', 'W', 'L', 'Streak', 'Notes'])
    home_team_df = home_team_df[home_team_df.Team_Points != 'Tm']
    home_team_df["Team_Points"] = pd.to_numeric(home_team_df["Team_Points"])
    home_team_df["Opponent_Points"] = pd.to_numeric(
        home_team_df["Opponent_Points"])

    url2 = "https://www.basketball-reference.com/teams/{}/2020_games.html".format(
        away_team)
    dfs2 = pd.read_html(url2)
    away_team_df = pd.concat(dfs2)
    away_team_df = away_team_df[pd.notnull(away_team_df['Tm'])]
    away_team_df.columns = ['Game', 'Date', 'Time', 'Drop', 'Drop2', 'Drop3',
                            'Opponent', 'Drop4', 'Drop5', 'Team_Points',
                            'Opponent_Points', 'W', 'L', 'Streak', 'Notes']
    away_team_df = away_team_df.drop(
        columns=['Game', 'Date', 'Time', 'Drop', 'Drop2', 'Drop3', 'Drop4',
                 'Drop5', 'W', 'L', 'Streak', 'Notes'])
    away_team_df = away_team_df[away_team_df.Team_Points != 'Tm']
    away_team_df["Team_Points"] = pd.to_numeric(away_team_df["Team_Points"])
    away_team_df["Opponent_Points"] = pd.to_numeric(
        away_team_df["Opponent_Points"])

    homeTeamPoints = home_team_df.Team_Points.mean()
    homeTeamPointsDev = home_team_df.Team_Points.std()
    opphomeTeamPoints = home_team_df.Opponent_Points.mean()
    opphomeTeamPointsDev = home_team_df.Opponent_Points.std()
    awayTeamPoints = away_team_df.Team_Points.mean()
    awayTeamPointsDev = away_team_df.Team_Points.std()
    oppawayTeamPoints = away_team_df.Opponent_Points.mean()
    oppawayTeamPointsDev = away_team_df.Opponent_Points.std()

    def gameSim():
        homeTeamScore = (((rnd.gauss(homeTeamPoints,
                                     homeTeamPointsDev)) + rnd.gauss(
            opphomeTeamPoints, opphomeTeamPointsDev)) / 2 + homeCourtAdvantage)
        awayTeamScore = ((rnd.gauss(awayTeamPoints,
                                    awayTeamPointsDev)) + rnd.gauss(
            oppawayTeamPoints, oppawayTeamPointsDev)) / 2
        if int(round(homeTeamScore)) > int(round(awayTeamScore)):
            return 1, homeTeamScore, awayTeamScore
        elif int(round(homeTeamScore)) < int(round(awayTeamScore)):
            return -1, homeTeamScore, awayTeamScore
        else:
            return 0, homeTeamScore, awayTeamScore

    def gamesSim(ns):
        gamesout = []
        team1win = 0
        team2win = 0
        tie = 0
        global avgHomeTeamScore
        global avgAwayTeamScore
        avgHomeTeamScore = 0
        avgAwayTeamScore = 0
        for i in range(ns):
            gm, homeTeamScore, awayTeamScore = gameSim()
            avgHomeTeamScore = (homeTeamScore + avgHomeTeamScore)
            avgAwayTeamScore = (awayTeamScore + avgAwayTeamScore)
            gamesout.append(gm)
            if gm == 1:
                team1win += 1
                return avgHomeTeamScore, avgAwayTeamScore
            elif gm == -1:
                team2win += 1
                return avgHomeTeamScore, avgAwayTeamScore
            else:
                tie += 1
                return avgHomeTeamScore, avgAwayTeamScore

    gamesSim(100000)

    print('progress', 10)

    url3 = "http://www.espn.com/nba/hollinger/teamstats"
    df_list = pd.read_html(url3)
    addteamData = df_list[0]
    addteamData = pd.DataFrame(addteamData)
    addteamData = addteamData[[1, 10, 11]]

    addteamData.columns = ['TEAM', 'Offensive_Effeciency',
                           'Defensive_Effeciency']

    addteamData.loc[addteamData.TEAM == 'Atlanta', 'TEAM'] = "ATL"
    addteamData.loc[addteamData.TEAM == 'Boston', 'TEAM'] = "BOS"
    addteamData.loc[addteamData.TEAM == 'Brooklyn', 'TEAM'] = "BRK"
    addteamData.loc[addteamData.TEAM == 'Charlotte', 'TEAM'] = "CHA"
    addteamData.loc[addteamData.TEAM == 'Chicago', 'TEAM'] = "CHI"
    addteamData.loc[addteamData.TEAM == 'Cleveland', 'TEAM'] = "CLE"
    addteamData.loc[addteamData.TEAM == 'Dallas', 'TEAM'] = "DAL"
    addteamData.loc[addteamData.TEAM == 'Denver', 'TEAM'] = "DEN"
    addteamData.loc[addteamData.TEAM == 'Detroit', 'TEAM'] = "DET"
    addteamData.loc[addteamData.TEAM == 'Golden State', 'TEAM'] = "GSW"
    addteamData.loc[addteamData.TEAM == 'Houston', 'TEAM'] = "HOU"
    addteamData.loc[addteamData.TEAM == 'Indiana', 'TEAM'] = "IND"
    addteamData.loc[addteamData.TEAM == 'LA Clippers', 'TEAM'] = "LAC"
    addteamData.loc[addteamData.TEAM == 'Memphis', 'TEAM'] = "MEM"
    addteamData.loc[addteamData.TEAM == 'Miami', 'TEAM'] = "MIA"
    addteamData.loc[addteamData.TEAM == 'Milwaukee', 'TEAM'] = "MIL"
    addteamData.loc[addteamData.TEAM == 'Minnesota', 'TEAM'] = "MIN"
    addteamData.loc[addteamData.TEAM == 'New Orleans', 'TEAM'] = "NOP"
    addteamData.loc[addteamData.TEAM == 'New York', 'TEAM'] = "NYK"
    addteamData.loc[addteamData.TEAM == 'Oklahoma City', 'TEAM'] = "OKC"
    addteamData.loc[addteamData.TEAM == 'Orlando', 'TEAM'] = "ORL"
    addteamData.loc[addteamData.TEAM == 'Philadelphia', 'TEAM'] = "PHI"
    addteamData.loc[addteamData.TEAM == 'Phoenix', 'TEAM'] = "PHO"
    addteamData.loc[addteamData.TEAM == 'Portland', 'TEAM'] = "POR"
    addteamData.loc[addteamData.TEAM == 'Sacramento', 'TEAM'] = "SAC"
    addteamData.loc[addteamData.TEAM == 'San Antonio', 'TEAM'] = "SAS"
    addteamData.loc[addteamData.TEAM == 'LA Lakers', 'TEAM'] = "LAL"
    addteamData.loc[addteamData.TEAM == 'Toronto', 'TEAM'] = "TOR"
    addteamData.loc[addteamData.TEAM == 'Utah', 'TEAM'] = "UTA"
    addteamData.loc[addteamData.TEAM == 'Washington', 'TEAM'] = "WAS"

    url3 = "https://www.espn.com/nba/stats/team"
    df_list = pd.read_html(url3)
    moreteamData = df_list[1]
    teamList = df_list[0]
    moreteamData = pd.DataFrame(moreteamData)

    teamList.columns
    moreteamData.columns
    df = teamList.join(moreteamData, how='outer')

    dfNew = df[['Team', 'STL', 'BLK', 'AST', 'TO', 'FG%']]
    dfNew.columns = ['TEAM', 'STL', 'BLK', 'AST', 'TO', 'FG%']
    dfNew.loc[dfNew.TEAM == 'Atlanta Hawks', 'TEAM'] = "ATL"
    dfNew.loc[dfNew.TEAM == 'Boston Celtics', 'TEAM'] = "BOS"
    dfNew.loc[dfNew.TEAM == 'Brooklyn Nets', 'TEAM'] = "BRK"
    dfNew.loc[dfNew.TEAM == 'Charlotte Hornets', 'TEAM'] = "CHA"
    dfNew.loc[dfNew.TEAM == 'Chicago Bulls', 'TEAM'] = "CHI"
    dfNew.loc[dfNew.TEAM == 'Cleveland Cavaliers', 'TEAM'] = "CLE"
    dfNew.loc[dfNew.TEAM == 'Dallas Mavericks', 'TEAM'] = "DAL"
    dfNew.loc[dfNew.TEAM == 'Denver Nuggets', 'TEAM'] = "DEN"
    dfNew.loc[dfNew.TEAM == 'Detroit Pistons', 'TEAM'] = "DET"
    dfNew.loc[dfNew.TEAM == 'Golden State Warriors', 'TEAM'] = "GSW"
    dfNew.loc[dfNew.TEAM == 'Houston Rockets', 'TEAM'] = "HOU"
    dfNew.loc[dfNew.TEAM == 'Indiana Pacers', 'TEAM'] = "IND"
    dfNew.loc[dfNew.TEAM == 'LA Clippers', 'TEAM'] = "LAC"
    dfNew.loc[dfNew.TEAM == 'Memphis Grizzlies', 'TEAM'] = "MEM"
    dfNew.loc[dfNew.TEAM == 'Miami Heat', 'TEAM'] = "MIA"
    dfNew.loc[dfNew.TEAM == 'Milwaukee Bucks', 'TEAM'] = "MIL"
    dfNew.loc[dfNew.TEAM == 'Minnesota Timberwolves', 'TEAM'] = "MIN"
    dfNew.loc[dfNew.TEAM == 'New Orleans Pelicans', 'TEAM'] = "NOP"
    dfNew.loc[dfNew.TEAM == 'New York Knicks', 'TEAM'] = "NYK"
    dfNew.loc[dfNew.TEAM == 'Oklahoma City Thunder', 'TEAM'] = "OKC"
    dfNew.loc[dfNew.TEAM == 'Orlando Magic', 'TEAM'] = "ORL"
    dfNew.loc[dfNew.TEAM == 'Philadelphia 76ers', 'TEAM'] = "PHI"
    dfNew.loc[dfNew.TEAM == 'Phoenix Suns', 'TEAM'] = "PHO"
    dfNew.loc[dfNew.TEAM == 'Portland Trail Blazers', 'TEAM'] = "POR"
    dfNew.loc[dfNew.TEAM == 'Sacramento Kings', 'TEAM'] = "SAC"
    dfNew.loc[dfNew.TEAM == 'San Antonio Spurs', 'TEAM'] = "SAS"
    dfNew.loc[dfNew.TEAM == 'Los Angeles Lakers', 'TEAM'] = "LAL"
    dfNew.loc[dfNew.TEAM == 'Toronto Raptors', 'TEAM'] = "TOR"
    dfNew.loc[dfNew.TEAM == 'Utah Jazz', 'TEAM'] = "UTA"
    dfNew.loc[dfNew.TEAM == 'Washington Wizards', 'TEAM'] = "WAS"

    url3 = "https://www.basketball-reference.com/leagues/NBA_2019_ratings.html"
    df_list = pd.read_html(url3)
    evenmoreteamData = df_list[0]
    evenmoreteamData = pd.DataFrame(evenmoreteamData)

    evenmoreteamData.columns = evenmoreteamData.columns.droplevel()

    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Atlanta Hawks', 'Team'] = "ATL"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Boston Celtics', 'Team'] = "BOS"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Brooklyn Nets', 'Team'] = "BRK"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Charlotte Hornets', 'Team'] = "CHA"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Chicago Bulls', 'Team'] = "CHI"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Cleveland Cavaliers', 'Team'] = "CLE"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Dallas Mavericks', 'Team'] = "DAL"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Denver Nuggets', 'Team'] = "DEN"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Detroit Pistons', 'Team'] = "DET"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Golden State Warriors', 'Team'] = "GSW"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Houston Rockets', 'Team'] = "HOU"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Indiana Pacers', 'Team'] = "IND"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Los Angeles Clippers', 'Team'] = "LAC"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Memphis Grizzlies', 'Team'] = "MEM"
    evenmoreteamData.loc[evenmoreteamData.Team == 'Miami Heat', 'Team'] = "MIA"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Milwaukee Bucks', 'Team'] = "MIL"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Minnesota Timberwolves', 'Team'] = "MIN"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'New Orleans Pelicans', 'Team'] = "NOP"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'New York Knicks', 'Team'] = "NYK"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Oklahoma City Thunder', 'Team'] = "OKC"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Orlando Magic', 'Team'] = "ORL"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Philadelphia 76ers', 'Team'] = "PHI"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Phoenix Suns', 'Team'] = "PHO"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Portland Trail Blazers', 'Team'] = "POR"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Sacramento Kings', 'Team'] = "SAC"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'San Antonio Spurs', 'Team'] = "SAS"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Los Angeles Lakers', 'Team'] = "LAL"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Toronto Raptors', 'Team'] = "TOR"
    evenmoreteamData.loc[evenmoreteamData.Team == 'Utah Jazz', 'Team'] = "UTA"
    evenmoreteamData.loc[
        evenmoreteamData.Team == 'Washington Wizards', 'Team'] = "WAS"

    evenmoreteamData = evenmoreteamData[['Team', 'ORtg', 'DRtg']]
    evenmoreteamData.columns = ['TEAM', 'ORtg', 'DRtg']

    # CLOSE is the dataframe with everything combined
    almostDone = pd.merge(addteamData, dfNew, on=['TEAM'])
    close = pd.merge(almostDone, evenmoreteamData, on=['TEAM'])

    homeTeamFilter = close['TEAM'] == home_team
    closeHomeTeam = close[homeTeamFilter]

    awayTeamFilter = close['TEAM'] == away_team
    closeAwayTeam = close[awayTeamFilter]

    # CALCULATE STATS NEEDED FOR SKLEARN MODEL

    away_team_filtered = away_team_df.tail(5)
    away_team_avg_points_last_5_games = away_team_filtered["Team_Points"].mean()
    away_team_avg_opp_points_last_5_games = away_team_filtered[
        "Opponent_Points"].mean()
    away_team_avg_points = away_team_df["Team_Points"].mean()
    away_team_avg_points_allowed = away_team_df["Opponent_Points"].mean()

    home_team_filtered = home_team_df.tail(5)
    home_team_avg_points_last_5_games = home_team_filtered["Team_Points"].mean()
    home_team_avg_opp_points_last_5_games = home_team_filtered[
        "Opponent_Points"].mean()
    home_avg_points = home_team_df["Team_Points"].mean()
    home_avg_against = home_team_df["Opponent_Points"].mean()

    home_team_dataframe = closeHomeTeam[['AST', 'TO', 'FG%', 'ORtg']]
    home_team_dataframe.columns = ['HomeTeamAvgAssistsPerGame',
                                   'HomeTeamAvgTurnoversPerGame',
                                   'HomeTeamFieldGoalPercentage',
                                   'HomeTeamAvgOffensiveRating']
    home_team_dataframe['HomeTeamAvgPointsPerGame'] = home_avg_points
    home_team_dataframe['HomeTeamAvgPointsAllowed'] = home_avg_against
    home_team_dataframe[
        'HomeTeamAvgPointsPerGameLast5Games'] = home_team_avg_points_last_5_games
    home_team_dataframe[
        'HomeTeamAvgPointsAllowedLast5Games'] = home_team_avg_opp_points_last_5_games
    home_team_dataframe['id'] = "1"

    away_team_dataframe = closeAwayTeam[['TO', 'BLK', 'STL', 'DRtg']]
    away_team_dataframe.columns = ['AwayTeamAvgTurnoverPerGame',
                                   'AwayTeamAvgBlocksPerGame',
                                   'AwayTeamAvgStealsPerGame',
                                   'AwayTeamAvgDefensiveRating']
    away_team_dataframe['AwayTeamAvgPointsPerGame'] = away_team_avg_points
    away_team_dataframe[
        'AwayTeamAvgPointsAllowed'] = away_team_avg_points_allowed
    away_team_dataframe[
        'AwayTeamAvgPointsPerGameLast5Games'] = away_team_avg_points_last_5_games
    away_team_dataframe[
        'AwayTeamAvgPointsAllowedLast5Games'] = away_team_avg_opp_points_last_5_games
    away_team_dataframe['id'] = "1"

    home_team_dataframe_two = closeHomeTeam[['DRtg', 'ORtg', 'TO', 'BLK']]
    home_team_dataframe_two.columns = ['HomeTeamAvgDefensiveRating',
                                       'HomeTeamAvgOffensiveRating',
                                       'HomeTeamAvgTurnoversPerGame',
                                       'HomeTeamAvgBlocksPerGame']
    home_team_dataframe_two['HomeTeamAvgPointsPerGame'] = home_avg_points
    home_team_dataframe_two['HomeTeamAvgPointsAllowed'] = home_avg_against
    home_team_dataframe_two[
        'HomeTeamAvgPointsPerGameLast5Games'] = home_team_avg_points_last_5_games
    home_team_dataframe_two[
        'HomeTeamAvgPointsAllowedLast5Games'] = home_team_avg_opp_points_last_5_games
    home_team_dataframe_two['id'] = "1"

    away_team_dataframe_two = closeAwayTeam[['ORtg', 'STL', 'BLK', 'FG%', 'TO']]
    away_team_dataframe_two.columns = ['AwayTeamAvgOffensiveRating',
                                       'AwayTeamAvgStealsPerGame',
                                       'AwayTeamAvgBlocksPerGame',
                                       'AwayTeamFieldGoalPercentage',
                                       'AwayTeamAvgTurnoverPerGame']
    away_team_dataframe_two['AwayTeamAvgPointsPerGame'] = away_team_avg_points
    away_team_dataframe_two[
        'AwayTeamAvgPointsAllowed'] = away_team_avg_points_allowed
    away_team_dataframe_two[
        'AwayTeamAvgPointsPerGameLast5Games'] = away_team_avg_points_last_5_games
    away_team_dataframe_two[
        'AwayTeamAvgPointsAllowedLast5Games'] = away_team_avg_opp_points_last_5_games
    away_team_dataframe_two['id'] = "1"

    home_pred = pd.merge(away_team_dataframe, home_team_dataframe, on='id')
    away_pred = pd.merge(away_team_dataframe_two, home_team_dataframe_two,
                         on='id')

    away_pred.shape

    print('progress', 15)

    # GET THE TRAINING DATASET

    data = MULTIPLE_SEASON[MULTIPLE_SEASON.HomeTeamAvgPointsAllowed != 0]
    data = data[data.AwayTeamAvgPointsAllowed != 0]
    data = data[data.Season != "2014"]
    data = data[data.Season != "2015"]
    data = data[data.Season != "2016"]
    data = data[data.Season != "2017"]

    data = data.dropna(how='any', axis=0)

    HomeScorePredictionFeatures = data[
        ['AwayTeamAvgDefensiveRating', 'HomeTeamAvgOffensiveRating',
         'HomeTeamAvgPointsPerGame', 'AwayTeamAvgPointsPerGame',
         'HomeTeamAvgPointsAllowed', 'AwayTeamAvgPointsAllowed',
         'AwayTeamAvgStealsPerGame', 'AwayTeamAvgBlocksPerGame',
         'HomeTeamFieldGoalPercentage', 'HomeTeamAvgTurnoversPerGame',
         'AwayTeamAvgTurnoverPerGame', 'HomeTeamAvgAssistsPerGame',
         'HomeTeamAvgPointsPerGameLast5Games',
         'AwayTeamAvgPointsPerGameLast5Games',
         'HomeTeamAvgPointsAllowedLast5Games',
         'AwayTeamAvgPointsAllowedLast5Games']]
    HomeScoreOutcome = data[['HomePts']]

    # HOME TEAM SCORE PREDICTION
    print('progress', 20)

    from sklearn.ensemble import RandomForestRegressor
    from sklearn.model_selection import train_test_split

    home_pred = home_pred.drop(columns=['id'])
    X_train, X_test, y_train, y_test = train_test_split(
        HomeScorePredictionFeatures, HomeScoreOutcome, test_size=0.2,
        random_state=42)

    regressor = RandomForestRegressor(n_estimators=400, criterion='mse',
                                      max_depth=None, min_samples_split=2,
                                      min_samples_leaf=1,
                                      min_weight_fraction_leaf=0.0,
                                      max_features='sqrt', max_leaf_nodes=None,
                                      min_impurity_decrease=0.0,
                                      min_impurity_split=None, bootstrap=False,
                                      oob_score=False, n_jobs=None,
                                      random_state=None, verbose=0,
                                      warm_start=False, ccp_alpha=0.0,
                                      max_samples=None)
    regressor.fit(X_train, y_train)
    y_pred = regressor.predict(home_pred)

    # NEED TO CREATE A LIST THAT MATCHED X_train columns for the HOME TEAM

    home_score_2 = (avgHomeTeamScore)
    home_score_prediction = (home_score_2 + y_pred) / 2

    # AWAY TEAM SCORE PREDICTION

    AwayScorePredictionFeatures = data[
        ['AwayTeamAvgOffensiveRating', 'HomeTeamAvgDefensiveRating',
         'HomeTeamAvgOffensiveRating', 'HomeTeamAvgPointsPerGame',
         'AwayTeamAvgPointsPerGame', 'HomeTeamAvgPointsAllowed',
         'AwayTeamAvgPointsAllowed', 'AwayTeamAvgStealsPerGame',
         'AwayTeamAvgBlocksPerGame', 'AwayTeamFieldGoalPercentage',
         'HomeTeamAvgTurnoversPerGame', 'AwayTeamAvgTurnoverPerGame',
         'HomeTeamAvgBlocksPerGame', 'HomeTeamAvgPointsPerGameLast5Games',
         'AwayTeamAvgPointsPerGameLast5Games',
         'HomeTeamAvgPointsAllowedLast5Games',
         'AwayTeamAvgPointsAllowedLast5Games']]
    AwayScoreOutcome = data[['AwayPts']]

    away_pred = away_pred.drop(columns=['id'])

    print('progress', 55)

    X_train, X_test, y_train, y_test = train_test_split(
        AwayScorePredictionFeatures, AwayScoreOutcome, test_size=0.2,
        random_state=42)

    regressor = RandomForestRegressor(n_estimators=400, criterion='mse',
                                      max_depth=None, min_samples_split=2,
                                      min_samples_leaf=1,
                                      min_weight_fraction_leaf=0.0,
                                      max_features='sqrt', max_leaf_nodes=None,
                                      min_impurity_decrease=0.0,
                                      min_impurity_split=None, bootstrap=False,
                                      oob_score=False, n_jobs=None,
                                      random_state=None, verbose=0,
                                      warm_start=False, ccp_alpha=0.0,
                                      max_samples=None)
    regressor.fit(X_train, y_train)
    away_pred_score = regressor.predict(away_pred)
    # NEED TO CREATE A LIST THAT MATCHED X_train columns for the AWAY TEAM

    print('progress', 90)

    away_score_2 = (avgAwayTeamScore)
    away_score_prediction = (away_score_2 + away_pred_score) / 2

    away_score_prediction_final = np.array(away_score_prediction,
                                           dtype=np.float)
    away_score_prediction_final = away_score_prediction_final.round(decimals=2)

    home_score_2 = (avgHomeTeamScore)
    home_score_prediction = (home_score_2 + y_pred) / 2

    home_score_prediction_final = np.array(home_score_prediction,
                                           dtype=np.float)
    home_score_prediction_final = home_score_prediction_final.round(decimals=2)

    print('result', home_score_prediction_final[0],
          away_score_prediction_final[0])


def main():
    parser = ArgumentParser()
    parser.add_argument(
        '--home',
        type=str,
        required=True,
        help='home team',
    )
    parser.add_argument(
        '--away',
        type=str,
        required=True,
        help='home team',
    )

    args = parser.parse_args()

    # use args.nodes as you need
    calculate(args.home, args.away)


if __name__ == '__main__':
    main()
